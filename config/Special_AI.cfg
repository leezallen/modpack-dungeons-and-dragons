# Configuration file

##########################################################################################################
# _general
#--------------------------------------------------------------------------------------------------------#
# General and/or miscellaneous options.
##########################################################################################################

_general {
    # If true, the mod will start up in debug mode.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:_debug_mode=false

    # Chance for an entity on the depacify list to spawn aggressive, instead of just neutral.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.0 ]
    D:depacify_aggressive_chance=0.0

    # List of passive mobs (by entity id) that are made "neutral" like wolves.
    # You may put a tilde (~) in front of any entity id to make it specific; specific entity ids
    # will not count any entities extending (i.e., based on) the specified entity.
    # Additional number after the entity id is the chance (0.0 to 1.0) for entities of that type to spawn with the AI.
    # May or may not work on mod mobs.
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ minecraft:chicken 1.0, minecraft:cow 1.0, minecraft:pig 1.0, minecraft:sheep 1.0, minecraft:rabbit 1.0, minecraft:squid 1.0 } ]
    S:depacify_list <
        minecraft:chicken 0.01
        minecraft:cow 0.01
        minecraft:pig 0.01
        minecraft:sheep 0.01
        minecraft:rabbit 0.25
        familiarfauna:familiarfauna.turkey 0.25
        familiarfauna:familiarfauna.deer 0.25
     >

    # If true, passive mobs will seek out and eat the items used to breed them laying on the floor.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:eat_breeding_items=true

    # If true, when mobs eat breeding items off the floor, they will regain health like wolves.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:eating_heals=true
}


##########################################################################################################
# door_breaking
#--------------------------------------------------------------------------------------------------------#
# Options to customize monsters' door-breaking behavior.
##########################################################################################################

door_breaking {
    # If true, mobs will destroy doors that are blocking their path.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:_enabled=true

    # The block breaking speed multiplier for mobs, relative to the player's block breaking speed.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.33 ]
    D:break_speed=0.33

    # If true, broken blocks will leave item drops.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:leave_drops=true

    # If true, creepers will be very mad about not having arms to break things with, and resort to what they know best...
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:mad_creepers=false

    # List of mobs that can gain door-breaking AI (note that the entity must have task-based AI enabled).
    # The number after each mob is the chance for that mob type to get the AI, from 0 to 1.
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ minecraft:zombie 1.0, minecraft:creeper 1.0, minecraft:zombie_pigman 1.0 } ]
    S:mob_list <
        minecraft:zombie 1.0
        minecraft:creeper 1.0
        minecraft:zombie_pigman 1.0
     >

    # If true, mobs will only break doors while they are chasing an attack target.
    # Setting this to false typically leads to mobs smashing into your house to get to blocks they are targeting
    # as part of an idle griefing or fiddling behavior, such as torches or chests.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:requires_target=true

    # If true, mobs will only target blocks they have the tools to harvest.
    # For example, they will only break iron doors with a pickaxe.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:requires_tools=true

    # Door blocks that can be broken by mobs chasing you.
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id[<properties>], mod_id:* }, Default={ minecraft:wooden_door, minecraft:iron_door, minecraft:trapdoor, minecraft:fence_gate, minecraft:iron_trapdoor, minecraft:spruce_fence_gate, minecraft:birch_fence_gate, minecraft:jungle_fence_gate, minecraft:dark_oak_fence_gate, minecraft:acacia_fence_gate, minecraft:spruce_door, minecraft:birch_door, minecraft:jungle_door, minecraft:acacia_door, minecraft:dark_oak_door, bewitchment:block_cypress_door, bewitchment:block_elder_door, bewitchment:block_juniper_door, bewitchment:block_dragons_blood_door, bewitchment:cypress_trapdoor, bewitchment:elder_trapdoor, bewitchment:juniper_trapdoor, bewitchment:dragons_blood_trapdoor, bewitchment:cypress_fence_gate, bewitchment:elder_fence_gate, bewitchment:juniper_fence_gate, bewitchment:dragons_blood_fence_gate, traverse:fir_fence_gate, traverse:fir_door, twilightforest:twilight_oak_door, twilightforest:twilight_oak_trapdoor, twilightforest:twilight_oak_gate, twilightforest:canopy_door, twilightforest:canopy_trapdoor, twilightforest:canopy_gate, twilightforest:mangrove_door, twilightforest:mangrove_trapdoor, twilightforest:mangrove_gate, twilightforest:dark_door, twilightforest:dark_trapdoor, twilightforest:dark_gate, twilightforest:time_door, twilightforest:time_trapdoor, twilightforest:time_gate, twilightforest:trans_door, twilightforest:trans_trapdoor, twilightforest:trans_gate, twilightforest:mine_door, twilightforest:mine_trapdoor, twilightforest:mine_gate, twilightforest:sort_door, twilightforest:sort_trapdoor, twilightforest:sort_gate, midnight:shadowroot_door, midnight:dark_willow_door, midnight:dead_wood_door, midnight:tenebrum_door, midnight:nightshroom_door, midnight:dewshroom_door, midnight:viridshroom_door, midnight:shadowroot_trapdoor, midnight:dark_willow_trapdoor, midnight:dead_wood_trapdoor, midnight:tenebrum_trapdoor, midnight:nightshroom_trapdoor, midnight:dewshroom_trapdoor, midnight:viridshroom_trapdoor, midnight:shadowroot_fence_gate, midnight:dead_wood_fence_gate, midnight:dark_willow_fence_gate, midnight:dewshroom_fence_gate, midnight:viridshroom_fence_gate, midnight:nightshroom_fence_gate, customnpcs:npcscripteddoor, mysticalworld:charred_fence_gate, mysticalworld:mud_block_fence_gate, mysticalworld:mud_brick_fence_gate } ]
    S:target_blocks <
        minecraft:wooden_door
        minecraft:iron_door
        minecraft:trapdoor
        minecraft:fence_gate
        minecraft:iron_trapdoor
        minecraft:spruce_fence_gate
        minecraft:birch_fence_gate
        minecraft:jungle_fence_gate
        minecraft:dark_oak_fence_gate
        minecraft:acacia_fence_gate
        minecraft:spruce_door
        minecraft:birch_door
        minecraft:jungle_door
        minecraft:acacia_door
        minecraft:dark_oak_door
        traverse:fir_door
        traverse:fir_fence_gate
     >
}


##########################################################################################################
# elite_ai
#--------------------------------------------------------------------------------------------------------#
# Options to control the types of elite AI and their weighted chances of occurring.
##########################################################################################################

elite_ai {
    # List of mobs that can gain special AI patterns and their chances to gain those patterns.
    # You can specify multiple chances for each entity - each chance will be rolled and multiple AIs can stack.
    # Note that the entity must have task-based AI enabled.
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ minecraft:zombie 0.05 0.05, minecraft:skeleton 0.2 0.05, minecraft:zombie_pigman 0.1 0.05 0.02 } ]
    S:_mob_list <
        minecraft:zombie 0.05 0.05
        minecraft:skeleton 0.2 0.05
        minecraft:zombie_pigman 0.1 0.05 0.02
     >

    # Weight for the barrage ai pattern to be chosen.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:ai_barrage=1

    # Weight for the charge ai pattern to be chosen.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:ai_charge=1

    # Weight for the jump ai pattern to be chosen.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:ai_jump=1

    # Weight for the leap ai pattern to be chosen.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:ai_leap=1

    # Weight for the shaman ai pattern to be chosen.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:ai_shaman=1

    # Weight for the spawner ai pattern to be chosen.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:ai_spawner=1

    # Weight for the sprint ai pattern to be chosen.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:ai_sprint=1

    # Weight for the thief ai pattern to be chosen.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:ai_thief=1

    # Weight for the throw ai pattern to be chosen.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:ai_throw=1

    # Weight for the throw_player ai pattern to be chosen.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:ai_throw_player=1

    # Flat health increase added to mobs with barrage ai.
    #    >> Double:[ Range={ -Infinity, Infinity }, Default=20.0 ]
    D:barrage_health_boost=20.0

    # Flat health increase added to mobs with charge ai.
    #    >> Double:[ Range={ -Infinity, Infinity }, Default=20.0 ]
    D:charge_health_boost=20.0

    # Knockback resistance added to mobs with charge ai.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.5 ]
    D:charge_knockback_resistance=0.5

    # Speed increase multiplier to mobs with leap ai. Recommended to keep this well below 0.5.
    #    >> Double:[ Range={ -Infinity, Infinity }, Default=0.1 ]
    D:leap_speed_boost=0.1

    # Amount (in half-hearts) healed by mobs with shaman ai every 2 seconds. Can be overridden by the mob's nbt data.
    #    >> Float:[ Range={ -Infinity, Infinity }, Default=1.0 ]
    D:shaman_heal_amount=1.0

    # Flat health increase added to mobs with shaman ai.
    #    >> Double:[ Range={ -Infinity, Infinity }, Default=20.0 ]
    D:shaman_health_boost=20.0

    # Flat health increase added to mobs with spawner ai.
    #    >> Double:[ Range={ -Infinity, Infinity }, Default=40.0 ]
    D:spawner_health_boost=40.0

    # Speed increase multiplier to mobs with spawner ai. Recommended to keep this well below 0.5.
    #    >> Double:[ Range={ -Infinity, Infinity }, Default=-0.2 ]
    D:spawner_speed_boost=-0.2

    # Speed increase multiplier to the boots worn by mobs with sprint ai (these can drop as loot!).
    # Recommended to keep this well below 0.5.
    #    >> Double:[ Range={ 0.0, Infinity }, Default=0.1 ]
    D:sprint_boots_speed_boost=0.1

    # Speed increase multiplier to mobs with sprint ai while they are sprinting. Can be overridden by the mob's nbt data.
    # Setting this to 0 breaks the sprint ai, so don't do that.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.7 ]
    D:sprint_speed_boost=0.7

    # The minimum distance that mobs with thief ai will try to keep from players once they have stolen an item.
    # Can be overridden by the mob's nbt data.
    #    >> Float:[ Range={ 1.0, Infinity }, Default=16.0 ]
    D:thief_avoid_range=16.0

    # Speed increase multiplier to the helmet worn by mobs with thief ai (these can drop as loot!).
    # Recommended to keep this well below 0.5.
    #    >> Double:[ Range={ 0.0, Infinity }, Default=0.1 ]
    D:thief_helmet_speed_boost=0.1

    # Flat health increase added to mobs with throw-player ai.
    #    >> Double:[ Range={ -Infinity, Infinity }, Default=20.0 ]
    D:throw_player_health_boost=20.0

    # Flat damage increase added to the helmet worn by mobs with throw-player ai (these can drop as loot!).
    #    >> Double:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:throw_player_helmet_damage_boost=1.0

    # Knockback resistance added to mobs with throw-player ai.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.5 ]
    D:throw_player_knockback_resistance=0.5

    # Speed increase multiplier to mobs with throw ai. Recommended to keep this well below 0.5.
    #    >> Double:[ Range={ -Infinity, Infinity }, Default=0.1 ]
    D:throw_speed_boost=0.1
}


##########################################################################################################
# idle_activities
#--------------------------------------------------------------------------------------------------------#
# Options to customize all idle behaviors for monsters (fiddling/griefing).
##########################################################################################################

idle_activities {
    # The range at which mobs will search for blocks to target horizontally (xz-plane).
    #    >> Integer:[ Range={ 1, 2147483647 }, Default=12 ]
    I:range=12

    # The range at which mobs will search for blocks to target vertically (y-axis).
    #    >> Integer:[ Range={ 1, 2147483647 }, Default=6 ]
    I:range_vertical=6

    # Mobs' reach (from eye height) when targeting blocks. Player reach is about 4.5.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=3.5 ]
    D:reach=3.5

    # The number of blocks each mob randomly searches to grief/fiddle with every "scan_delay" ticks.
    #    >> Integer:[ Range={ 1, 2147483647 }, Default=32 ]
    I:scan_count=32

    # The maximum number of blocks that can be searched in any given tick by all mobs. 0 is no limit.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:scan_count_global=0

    # The number of ticks between each block scan.
    #    >> Integer:[ Range={ 1, 2147483647 }, Default=2 ]
    I:scan_delay=2
}


##########################################################################################################
# idle_fiddling
#--------------------------------------------------------------------------------------------------------#
# Options to customize monsters' idle fiddling behavior.
##########################################################################################################

idle_fiddling {
    # If true, mobs will flip switches, press buttons, etc. while not doing anything else.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:_enabled=true

    # List of mobs that can gain idle fiddling AI (note that the entity must have task-based AI enabled).
    # The number after each mob is the chance for that mob type to get the AI, from 0 to 1.
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ minecraft:skeleton 1.0, minecraft:zombie_pigman 1.0 } ]
    S:mob_list <
        minecraft:skeleton 0.5
        minecraft:zombie_pigman 0.5
     >

    # Specific blocks that will NOT be fiddled with by mobs.
    # Only really useful if you whitelist an entire namespace (*) to prevent mobs from fiddling with a few blocks from that namespace.
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id[<properties>], mod_id:* }, Default={  } ]
    S:target_blacklist <
     >

    # Specific blocks that will be fiddled with by mobs.
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id[<properties>], mod_id:* }, Default={ minecraft:tnt, minecraft:wooden_door, minecraft:lever, minecraft:stone_button, minecraft:cake, minecraft:unpowered_repeater, minecraft:powered_repeater, minecraft:fence_gate, minecraft:wooden_button, minecraft:unpowered_comparator, minecraft:powered_comparator, minecraft:spruce_fence_gate, minecraft:birch_fence_gate, minecraft:jungle_fence_gate, minecraft:dark_oak_fence_gate, minecraft:acacia_fence_gate, minecraft:spruce_door, minecraft:birch_door, minecraft:jungle_door, minecraft:acacia_door, minecraft:dark_oak_door, bewitchment:block_cypress_door, bewitchment:block_elder_door, bewitchment:block_juniper_door, bewitchment:block_dragons_blood_door, bewitchment:cypress_fence_gate, bewitchment:elder_fence_gate, bewitchment:juniper_fence_gate, bewitchment:dragons_blood_fence_gate, bewitchment:cypress_button, bewitchment:elder_button, bewitchment:juniper_button, bewitchment:dragons_blood_button, traverse:fir_fence_gate, traverse:fir_door, twilightforest:twilight_oak_button, twilightforest:twilight_oak_door, twilightforest:twilight_oak_gate, twilightforest:canopy_button, twilightforest:canopy_door, twilightforest:canopy_gate, twilightforest:mangrove_button, twilightforest:mangrove_door, twilightforest:mangrove_gate, twilightforest:dark_button, twilightforest:dark_door, twilightforest:dark_gate, twilightforest:time_button, twilightforest:time_door, twilightforest:time_gate, twilightforest:trans_button, twilightforest:trans_door, twilightforest:trans_gate, twilightforest:mine_button, twilightforest:mine_door, twilightforest:mine_gate, twilightforest:sort_button, twilightforest:sort_door, twilightforest:sort_gate, midnight:shadowroot_door, midnight:dark_willow_door, midnight:dead_wood_door, midnight:nightshroom_door, midnight:dewshroom_door, midnight:viridshroom_door, midnight:shadowroot_fence_gate, midnight:dead_wood_fence_gate, midnight:dark_willow_fence_gate, midnight:dewshroom_fence_gate, midnight:viridshroom_fence_gate, midnight:nightshroom_fence_gate, midnight:shadowroot_button, midnight:dead_wood_button, midnight:dark_willow_button, midnight:dewshroom_button, midnight:viridshroom_button, midnight:nightshroom_button, midnight:nightstone_button, midnight:trenchstone_button, midnight:rockshroom_bricks_button, midnight:midnight_lever, customnpcs:npcscripteddoor, mysticalworld:charred_button, mysticalworld:charred_fence_gate, mysticalworld:mud_block_button, mysticalworld:mud_block_fence_gate, mysticalworld:mud_brick_button, mysticalworld:mud_brick_fence_gate } ]
    S:target_blocks <
        minecraft:tnt
        minecraft:wooden_door
        minecraft:lever
        minecraft:stone_button
        minecraft:cake
        minecraft:unpowered_repeater
        minecraft:powered_repeater
        minecraft:fence_gate
        minecraft:wooden_button
        minecraft:unpowered_comparator
        minecraft:powered_comparator
        minecraft:spruce_fence_gate
        minecraft:birch_fence_gate
        minecraft:jungle_fence_gate
        minecraft:dark_oak_fence_gate
        minecraft:acacia_fence_gate
        minecraft:spruce_door
        minecraft:birch_door
        minecraft:jungle_door
        minecraft:acacia_door
        minecraft:dark_oak_door
        traverse:fir_door
        traverse:fir_fence_gate
     >
}


##########################################################################################################
# idle_griefing
#--------------------------------------------------------------------------------------------------------#
# Options to customize monsters' idle block breaking.
##########################################################################################################

idle_griefing {
    # If true, mobs will destroy blocks while not doing anything else.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:_enabled=true

    # If true, block breaking AI will automatically target all light sources (light value > 1).
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:break_lights=true

    # If true, a lound snapping sound (the vanilla door break sound) will be played when a block
    # is broken, which is audible regardless of distance.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:break_sound=false

    # The block breaking speed multiplier for mobs, relative to the player's block breaking speed.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.5 ]
    D:break_speed=0.5

    # If true, griefed blocks will leave item drops.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:leave_drops=true

    # If true, creepers will be very mad about not having arms to break things with, and resort to what they know best...
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:mad_creepers=true

    # List of mobs that can gain passive griefing AI (note that the entity must have task-based AI enabled).
    # The number after each mob is the chance for that mob type to get the AI, from 0 to 1.
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ minecraft:zombie 1.0, minecraft:creeper 1.0, minecraft:zombie_pigman 1.0 } ]
    S:mob_list <
        minecraft:zombie 0.1
        minecraft:creeper 0
        minecraft:zombie_pigman 0.1
     >

    # If true, mobs will only target blocks they have the tools to harvest.
    # For example, they will only break stone with a pickaxe.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:requires_tools=true

    # Specific blocks that will NOT be griefed by mobs.
    # Only really useful if "break_lights" is enabled or when you whitelist an entire namespace (*) to create safe
    # light sources, prevent mobs from breaking normal world gen that produces light, or for removing a few blocks
    # from a namespace that you don't want mobs to break.
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id[<properties>], mod_id:* }, Default={  } ]
    S:target_blacklist <
     >

    # Specific blocks that will be griefed by mobs.
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id[<properties>], mod_id:* }, Default={ minecraft:bed, minecraft:golden_rail, minecraft:crafting_table, minecraft:farmland, minecraft:furnace, minecraft:lit_furnace, minecraft:ladder, minecraft:enchanting_table, minecraft:brewing_stand, csb_ench_table:ender_enchanting_table, twilightforest:iron_ladder, midnight:shadowroot_ladder, midnight:dead_wood_ladder, midnight:dark_willow_ladder, midnight:dewshroom_ladder, midnight:viridshroom_ladder, midnight:nightshroom_ladder } ]
    S:target_blocks <
        minecraft:bed
        minecraft:crafting_table
        minecraft:farmland
        minecraft:furnace
        minecraft:lit_furnace
        minecraft:ladder
        minecraft:enchanting_table
        minecraft:brewing_stand
     >

    # Specific lootable blocks that will be griefed by mobs.
    # Unlike the normal "target_blocks", these blocks will not be targeted if they still have a loot table tag
    # (e.g., unopened dungeon chests).
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id[<properties>], mod_id:* }, Default={ minecraft:chest, minecraft:trapped_chest, midnight:shadowroot_chest } ]
    S:target_lootable <
     >
}


##########################################################################################################
# jockeys
#--------------------------------------------------------------------------------------------------------#
# Options relating to which mobs should act as riders or mounts.
##########################################################################################################

jockeys {
    # List of mobs that can be ridden on by normal-sized riders (not all entities can be controlled by their rider).
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ minecraft:spider, minecraft:slime, minecraft:pig, minecraft:sheep, minecraft:cow, minecraft:polar_bear } ]
    S:mount_list <
        minecraft:spider
        minecraft:slime
        minecraft:pig
        minecraft:sheep
        minecraft:cow
        minecraft:polar_bear
     >

    # List of mobs that can be ridden on by small riders or normal-sized riders that are babies(not all entities can be controlled by their rider).
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ minecraft:chicken, minecraft:rabbit } ]
    S:mount_list_small <
        minecraft:chicken
        minecraft:rabbit
     >

    # List of mobs that can ride normal-sized mounts and the chance for them to gain the rider AI.
    # Note that the entity must have task-based AI enabled.
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={ minecraft:zombie 0.05, minecraft:skeleton 0.1, minecraft:creeper 0.05, minecraft:witch 0.05, minecraft:zombie_pigman 0.1 } ]
    S:rider_list <
        minecraft:zombie 0.05
        minecraft:skeleton 0.1
        minecraft:creeper 0.05
        minecraft:witch 0.05
        minecraft:zombie_pigman 0.1
     >

    # List of mobs that can only ride small mounts or normal-sized mounts that are babies and the chance for them to gain the rider AI.
    # Note that the entity must have task-based AI enabled.
    #    >> Entity_Array:[ Value={ entity_id <extra_data>, ~entity_id <extra_data> }, Default={  } ]
    S:rider_list_small <
     >
}


##########################################################################################################
# reaction_ai
#--------------------------------------------------------------------------------------------------------#
# Options to customize reactive behaviors.
##########################################################################################################

reaction_ai {
    # If true, all mobs will try to avoid TNT and creepers that are about to explode.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:avoid_explosions=true

    # If true, all mobs will call for help from nearby mobs of the same type when struck.
    # Note that this does not trigger from killing blows.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:call_for_help=true

    # Chance for mobs to call for help when dealt a killing blow.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.2 ]
    D:call_for_help_on_death=0.2

    # The chance any mob will try to sidestep an arrow fired in their direction.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.4 ]
    D:dodge_arrows=0.4
}


##########################################################################################################
# villages
#--------------------------------------------------------------------------------------------------------#
# Options to control village aggression and reputation.
# For reference, starting reputation is 0, minimum is -30 and maximum is 10.
# You are considered an enemy to a village if your reputation is -15 or lower.
##########################################################################################################

villages {
    # Chance for you to be marked as an aggressor (to be attacked) when you break any block in a village
    # that is not on the "block_blacklist" while your reputation is low enough.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.1 ]
    D:block_aggression_chance=0.1

    # The "block_aggression_chance" and "block_treasured_aggression_chance" only trigger if your reputation
    # in the village is less than or equal to this limit.
    #    >> Integer:[ Range={ -30, 10 }, Default=-5 ]
    I:block_aggression_limit=-5

    # Specific blocks that will NOT anger villagers when broken.
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id[<properties>], mod_id:* }, Default={ minecraft:stone, minecraft:grass, minecraft:dirt, minecraft:sapling, minecraft:sand, minecraft:leaves, minecraft:golden_rail, minecraft:detector_rail, minecraft:web, minecraft:tallgrass, minecraft:deadbush, minecraft:yellow_flower, minecraft:red_flower, minecraft:brown_mushroom, minecraft:red_mushroom, minecraft:tnt, minecraft:redstone_wire, minecraft:wheat, minecraft:wooden_door, minecraft:rail, minecraft:iron_door, minecraft:unlit_redstone_torch, minecraft:snow_layer, minecraft:ice, minecraft:cactus, minecraft:reeds, minecraft:pumpkin, minecraft:lit_pumpkin, minecraft:unpowered_repeater, minecraft:powered_repeater, minecraft:brown_mushroom_block, minecraft:red_mushroom_block, minecraft:melon_block, minecraft:pumpkin_stem, minecraft:melon_stem, minecraft:vine, minecraft:fence_gate, minecraft:mycelium, minecraft:waterlily, minecraft:nether_wart, minecraft:cocoa, minecraft:tripwire_hook, minecraft:tripwire, minecraft:flower_pot, minecraft:carrots, minecraft:potatoes, minecraft:unpowered_comparator, minecraft:activator_rail, minecraft:leaves2, minecraft:slime, minecraft:packed_ice, minecraft:double_plant, minecraft:spruce_fence_gate, minecraft:birch_fence_gate, minecraft:jungle_fence_gate, minecraft:dark_oak_fence_gate, minecraft:acacia_fence_gate, minecraft:spruce_door, minecraft:birch_door, minecraft:jungle_door, minecraft:acacia_door, minecraft:dark_oak_door, minecraft:beetroots, minecraft:frosted_ice, minecraft:structure_void, minecraft:white_shulker_box, minecraft:orange_shulker_box, minecraft:magenta_shulker_box, minecraft:light_blue_shulker_box, minecraft:yellow_shulker_box, minecraft:lime_shulker_box, minecraft:pink_shulker_box, minecraft:gray_shulker_box, minecraft:silver_shulker_box, minecraft:cyan_shulker_box, minecraft:purple_shulker_box, minecraft:blue_shulker_box, minecraft:brown_shulker_box, minecraft:green_shulker_box, minecraft:red_shulker_box, minecraft:black_shulker_box, reccomplex:generic_space, reccomplex:generic_solid, reccomplex:structure_generator, reccomplex:maze_generator, reccomplex:weighted_command_block, reccomplex:spawn_script, bewitchment:block_cypress_door, bewitchment:block_elder_door, bewitchment:block_juniper_door, bewitchment:block_dragons_blood_door, bewitchment:leaves0, dynamictrees:rootydirtfake, dynamictrees:sapling, dynamictrees:bonsaipot, dynamictrees:fruitcocoa, dynamictrees:fruit, dynamictrees:leaves0, dynamictrees:leaves1, bewitchment:crop_aconitum, bewitchment:crop_belladonna, bewitchment:crop_garlic, bewitchment:crop_hellebore, bewitchment:crop_mandrake, bewitchment:crop_white_sage, bewitchment:crop_wormwood, bewitchment:salt_barrier, bewitchment:placed_item, bewitchment:embergrass, bewitchment:torchwood, bewitchment:spanish_moss, bewitchment:spanish_moss_end, bewitchment:blue_ink_cap, bewitchment:frostflower, bewitchment:flower_siphoning_allium, bewitchment:flower_siphoning_blue_orchid, bewitchment:flower_siphoning_dandelion, bewitchment:flower_siphoning_azure_bluet, bewitchment:flower_siphoning_oxeye_daisy, bewitchment:flower_siphoning_tulip_orange, bewitchment:flower_siphoning_tulip_pink, bewitchment:flower_siphoning_tulip_red, bewitchment:flower_siphoning_tulip_white, bewitchment:flower_siphoning_poppy, bewitchment:cypress_sapling, bewitchment:elder_sapling, bewitchment:juniper_sapling, bewitchment:dragons_blood_sapling, bewitchment:cypress_leaves, bewitchment:elder_leaves, bewitchment:juniper_leaves, bewitchment:dragons_blood_leaves, bewitchment:cypress_fence_gate, bewitchment:elder_fence_gate, bewitchment:juniper_fence_gate, bewitchment:dragons_blood_fence_gate, bewitchment:hellfire, opframe:littleopframe, traverse:red_autumnal_leaves, traverse:red_autumnal_sapling, traverse:brown_autumnal_leaves, traverse:brown_autumnal_sapling, traverse:orange_autumnal_leaves, traverse:orange_autumnal_sapling, traverse:yellow_autumnal_leaves, traverse:yellow_autumnal_sapling, traverse:fir_leaves, traverse:fir_sapling, traverse:fir_fence_gate, traverse:fir_door, traverse:dead_grass, traverse:cold_grass, dttraverse:leaves0, dttraverse:leaves1, dttraverse:leaves2, dttraverse:leaves3, dttraverse:leaves4, dungeons2:sandstone_gravel, dungeontactics:flower_sanguine, dungeontactics:flower_xp, dungeontactics:flower_bramble, dungeontactics:flower_bark, dungeontactics:flower_cinder, dungeontactics:flower_tangle, dungeontactics:flower_ailment, dungeontactics:flower_fade, dungeontactics:flower_feather, dungeontactics:bush_cherrybomb, dungeontactics:bush_incindiberry, dungeontactics:bush_glowcurrent, iceandfire:fire_lily, iceandfire:frost_lily, iceandfire:myrmex_desert_biolight, iceandfire:myrmex_jungle_biolight, mowziesmobs:grottol, notreepunching:fire_pit, switchbow:redstonepiece, switchbow:arrowdispenser, treasure2:fog, treasure2:high_fog, treasure2:med_fog, treasure2:low_fog, treasure2:wither_fog, treasure2:high_wither_fog, treasure2:med_wither_fog, treasure2:low_wither_fog, treasure2:poison_fog, treasure2:high_poison_fog, treasure2:med_poison_fog, treasure2:low_poison_fog, treasure2:spanish_moss, treasure2:proximity_spawner, twilightforest:twilight_leaves, twilightforest:cicada, twilightforest:twilight_plant, twilightforest:twilight_sapling, twilightforest:magic_leaves, twilightforest:trophy, twilightforest:twilight_leaves_3, twilightforest:uberous_soil, twilightforest:huge_mushgloom, twilightforest:trollvidr, twilightforest:unripe_trollber, twilightforest:trollber, twilightforest:huge_lilypad, twilightforest:huge_waterlily, twilightforest:castle_unlock, twilightforest:auroralized_glass, twilightforest:twilight_oak_door, twilightforest:twilight_oak_gate, twilightforest:canopy_door, twilightforest:canopy_gate, twilightforest:mangrove_door, twilightforest:mangrove_gate, twilightforest:dark_door, twilightforest:dark_gate, twilightforest:time_door, twilightforest:time_gate, twilightforest:trans_door, twilightforest:trans_gate, twilightforest:mine_door, twilightforest:mine_gate, twilightforest:sort_door, twilightforest:sort_gate, midnight:midnight_grass, midnight:midnight_mycelium, midnight:shadowroot_leaves, midnight:dark_willow_leaves, midnight:bulb_fungus_stem, midnight:tall_midnight_grass, midnight:double_midnight_grass, midnight:nightshroom, midnight:double_nightshroom, midnight:dewshroom, midnight:double_dewshroom, midnight:viridshroom, midnight:double_viridshroom, midnight:bogshroom, midnight:double_bogshroom, midnight:bogshroom_shelf, midnight:bulb_fungus, midnight:nightshroom_shelf, midnight:dewshroom_shelf, midnight:viridshroom_shelf, midnight:lumen_bud, midnight:double_lumen_bud, midnight:bladeshroom, midnight:bogweed, midnight:ghost_plant, midnight:fingered_grass, midnight:tendrilweed, midnight:runebush, midnight:dragon_nest, midnight:violeaf, midnight:crystal_flower, midnight:shadowroot_sapling, midnight:dark_willow_sapling, midnight:dark_water, midnight:deceitful_algae, midnight:unstable_bush, midnight:unstable_bush_blue_bloomed, midnight:unstable_bush_green_bloomed, midnight:unstable_bush_lime_bloomed, midnight:nightstone, midnight:miasma, midnight:archaic_glass_pane, midnight:shadowroot_door, midnight:dark_willow_door, midnight:dead_wood_door, midnight:tenebrum_door, midnight:nightshroom_door, midnight:dewshroom_door, midnight:viridshroom_door, midnight:shadowroot_fence_gate, midnight:dead_wood_fence_gate, midnight:dark_willow_fence_gate, midnight:dewshroom_fence_gate, midnight:viridshroom_fence_gate, midnight:nightshroom_fence_gate, midnight:suavis, customnpcs:npcscripteddoor, mysticalworld:aubergine_crop, mysticalworld:poisoned_potato_crop, mysticalworld:charred_fence_gate, mysticalworld:mud_block_fence_gate, mysticalworld:mud_brick_fence_gate } ]
    S:block_blacklist <
        minecraft:stone
        minecraft:grass
        minecraft:dirt
        minecraft:sapling
        minecraft:sand
        minecraft:leaves
        minecraft:golden_rail
        minecraft:detector_rail
        minecraft:web
        minecraft:tallgrass
        minecraft:deadbush
        minecraft:yellow_flower
        minecraft:red_flower
        minecraft:brown_mushroom
        minecraft:red_mushroom
        minecraft:tnt
        minecraft:redstone_wire
        minecraft:wheat
        minecraft:wooden_door
        minecraft:rail
        minecraft:iron_door
        minecraft:unlit_redstone_torch
        minecraft:snow_layer
        minecraft:ice
        minecraft:cactus
        minecraft:reeds
        minecraft:pumpkin
        minecraft:lit_pumpkin
        minecraft:unpowered_repeater
        minecraft:powered_repeater
        minecraft:brown_mushroom_block
        minecraft:red_mushroom_block
        minecraft:melon_block
        minecraft:pumpkin_stem
        minecraft:melon_stem
        minecraft:vine
        minecraft:fence_gate
        minecraft:mycelium
        minecraft:waterlily
        minecraft:nether_wart
        minecraft:cocoa
        minecraft:tripwire_hook
        minecraft:tripwire
        minecraft:flower_pot
        minecraft:carrots
        minecraft:potatoes
        minecraft:unpowered_comparator
        minecraft:activator_rail
        minecraft:leaves2
        minecraft:slime
        minecraft:packed_ice
        minecraft:double_plant
        minecraft:spruce_fence_gate
        minecraft:birch_fence_gate
        minecraft:jungle_fence_gate
        minecraft:dark_oak_fence_gate
        minecraft:acacia_fence_gate
        minecraft:spruce_door
        minecraft:birch_door
        minecraft:jungle_door
        minecraft:acacia_door
        minecraft:dark_oak_door
        minecraft:beetroots
        minecraft:frosted_ice
        minecraft:structure_void
        minecraft:white_shulker_box
        minecraft:orange_shulker_box
        minecraft:magenta_shulker_box
        minecraft:light_blue_shulker_box
        minecraft:yellow_shulker_box
        minecraft:lime_shulker_box
        minecraft:pink_shulker_box
        minecraft:gray_shulker_box
        minecraft:silver_shulker_box
        minecraft:cyan_shulker_box
        minecraft:purple_shulker_box
        minecraft:blue_shulker_box
        minecraft:brown_shulker_box
        minecraft:green_shulker_box
        minecraft:red_shulker_box
        minecraft:black_shulker_box
        biomesoplenty:grass
        biomesoplenty:leaves_0
        biomesoplenty:leaves_1
        biomesoplenty:leaves_2
        biomesoplenty:leaves_3
        biomesoplenty:leaves_4
        biomesoplenty:leaves_5
        biomesoplenty:leaves_6
        biomesoplenty:sacred_oak_fence_gate
        biomesoplenty:cherry_fence_gate
        biomesoplenty:umbran_fence_gate
        biomesoplenty:fir_fence_gate
        biomesoplenty:ethereal_fence_gate
        biomesoplenty:magic_fence_gate
        biomesoplenty:mangrove_fence_gate
        biomesoplenty:palm_fence_gate
        biomesoplenty:redwood_fence_gate
        biomesoplenty:willow_fence_gate
        biomesoplenty:pine_fence_gate
        biomesoplenty:hellbark_fence_gate
        biomesoplenty:jacaranda_fence_gate
        biomesoplenty:mahogany_fence_gate
        biomesoplenty:ebony_fence_gate
        biomesoplenty:eucalyptus_fence_gate
        biomesoplenty:sacred_oak_door_block
        biomesoplenty:cherry_door_block
        biomesoplenty:umbran_door_block
        biomesoplenty:fir_door_block
        biomesoplenty:ethereal_door_block
        biomesoplenty:magic_door_block
        biomesoplenty:mangrove_door_block
        biomesoplenty:palm_door_block
        biomesoplenty:redwood_door_block
        biomesoplenty:willow_door_block
        biomesoplenty:pine_door_block
        biomesoplenty:hellbark_door_block
        biomesoplenty:jacaranda_door_block
        biomesoplenty:mahogany_door_block
        biomesoplenty:ebony_door_block
        biomesoplenty:eucalyptus_door_block
        biomesoplenty:seaweed
        biomesoplenty:waterlily
        biomesoplenty:sapling_0
        biomesoplenty:sapling_1
        biomesoplenty:sapling_2
        biomesoplenty:plant_0
        biomesoplenty:plant_1
        biomesoplenty:double_plant
        biomesoplenty:mushroom
        biomesoplenty:flower_0
        biomesoplenty:flower_1
        biomesoplenty:ivy
        biomesoplenty:willow_vine
        dungeons2:sandstone_gravel
        dynamictrees:rootydirtfake
        dynamictrees:sapling
        dynamictrees:bonsaipot
        dynamictrees:fruitcocoa
        dynamictrees:fruit
        dynamictrees:leaves0
        dynamictrees:leaves1
        dynamictreesbop:leaves_flowering
        dynamictreesbop:leaves_palm
        dynamictreesbop:leaves0
        dynamictreesbop:leaves1
        dynamictreesbop:leaves2
        dynamictreesbop:leaves3
        dynamictreesbop:leaves4
        dynamictreesbop:leaves5
        dynamictreesbop:leaves6
        dynamictreesbop:leaves7
        tanspit:spit
        treasure2:fog
        treasure2:high_fog
        treasure2:med_fog
        treasure2:low_fog
        treasure2:wither_fog
        treasure2:high_wither_fog
        treasure2:med_wither_fog
        treasure2:low_wither_fog
        treasure2:poison_fog
        treasure2:high_poison_fog
        treasure2:med_poison_fog
        treasure2:low_poison_fog
        treasure2:spanish_moss
        treasure2:proximity_spawner
     >

    # Chance for you to lose 1 reputation when you break any block in a village that is not on the
    # "block_blacklist" while your reputation is low enough.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.15 ]
    D:block_rep_loss_chance=0.15

    # The "block_rep_loss_chance" and "block_treasured_rep_loss_chance" only trigger if your reputation
    # in the village is equal to or less than this limit.
    #    >> Integer:[ Range={ -30, 10 }, Default=8 ]
    I:block_rep_loss_limit=8

    # Chance for you to be marked as an aggressor (to be attacked) when you break a block in a village that
    # is on the "block_treasured_list" while your reputation is low enough.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=1.0 ]
    D:block_treasured_aggression_chance=1.0

    # Specific blocks that use separate chances for aggression and rep loss from other blocks.
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id[<properties>], mod_id:* }, Default={ minecraft:emerald_block, minecraft:bookshelf, minecraft:farmland, minecraft:cake } ]
    S:block_treasured_list <
        minecraft:emerald_block
        minecraft:bookshelf
        minecraft:farmland
        minecraft:cake
     >

    # Chance for you to lose 1 reputation when you break a block in a village that is on the "block_treasured_list"
    # while your reputation is low enough.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=1.0 ]
    D:block_treasured_rep_loss_chance=1.0

    # Specific blocks that WILL aggro villagers when broken. If any blocks are specified here, they will
    # then be the only blocks that anger villagers (i.e., trigger reputation loss and aggression).
    #    >> Block_Array:[ Value={ mod_id:block_id, mod_id:block_id[<properties>], mod_id:* }, Default={  } ]
    S:block_whitelist <
     >

    # If true, the "/villageinfo" command will state the village center position.
    # As the command has unlimited search radius, disable this to prevent players from using the command
    # to easily find the nearest village.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:command_include_center=true

    # Chance for you to earn 1 reputation for each monster killed near a village. The only reasonable way
    # to restore rep from -15 or lower with "villagers_defend" enabled.
    #    >> Double:[ Range={ 0.0, 1.0 }, Default=0.2 ]
    D:help_rep_chance=0.2

    # If true, all players known to a village will gain 1 rep when a new house is added to a village and
    # lose 1 rep when a house is lost. Highly recommended to keep "refresh_houses" enabled when this is.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:house_rep=true

    # If true, all villagers will spawn with randomized names based on their profession and career.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:name_villagers=true

    # If true, villager names will be marked as 'always shown' so that you do not need to mouse over them
    # to see their names. Also makes them a little easier to keep track of.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:name_villagers_always_show=false

    # If true, houses will stay a part of a village permanently once added (until their doors are destroyed
    # or all villagers in the village are killed), instead of being constantly added/removed as villagers move around.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:refresh_houses=true

    # If true, particle effects will play when players lose or gain village reputation.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:reputation_particles=true

    # If true, villager sound effects will play when players lose or gain village reputation.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:reputation_sounds=true

    # If true, villagers will defend their village by attacking its aggressors and players with
    # 'hated' standing (reputation <= -15), just like their iron golems do in vanilla.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:villagers_defend=true
}


